// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhatSport.Infrastructure;

#nullable disable

namespace WhatSport.Api.Migrations
{
    [DbContext(typeof(WhatSportContext))]
    [Migration("20211216082159_Change-Structure")]
    partial class ChangeStructure
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WhatSport.Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Málaga"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Granada"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Barcelona"
                        });
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Clubs", (string)null);
                });

            modelBuilder.Entity("WhatSport.Domain.Models.ClubSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("SportId");

                    b.ToTable("ClubSports", (string)null);
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "España"
                        });
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Equipments", (string)null);
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FriendUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends", (string)null);
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("NumLevel")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.HasIndex("UserId");

                    b.ToTable("Levels", (string)null);
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClubId");

                    b.HasIndex("SportId");

                    b.ToTable("Matches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DateEnd = new DateTime(2021, 12, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 12, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 1
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            DateEnd = new DateTime(2021, 12, 11, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 12, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 1
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            DateEnd = new DateTime(2021, 12, 31, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 12, 31, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 1
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            DateEnd = new DateTime(2021, 12, 21, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 12, 21, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 1
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            DateEnd = new DateTime(2022, 1, 8, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2022, 1, 8, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 1
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            DateEnd = new DateTime(2021, 12, 18, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 12, 18, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 1
                        },
                        new
                        {
                            Id = 7,
                            CityId = 1,
                            DateEnd = new DateTime(2021, 12, 17, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 12, 17, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 2
                        },
                        new
                        {
                            Id = 8,
                            CityId = 2,
                            DateEnd = new DateTime(2021, 12, 16, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 12, 16, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 2
                        },
                        new
                        {
                            Id = 9,
                            CityId = 1,
                            DateEnd = new DateTime(2021, 12, 31, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 2
                        },
                        new
                        {
                            Id = 10,
                            CityId = 3,
                            DateEnd = new DateTime(2021, 12, 11, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2021, 12, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "",
                            OtherPlace = "",
                            SportId = 2
                        });
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Assist")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("Players", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Assist = true,
                            MatchId = 1,
                            Note = "",
                            Team = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Assist = false,
                            MatchId = 1,
                            Note = "",
                            Team = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Assist = true,
                            MatchId = 1,
                            Note = "",
                            Team = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Assist = false,
                            MatchId = 2,
                            Note = "",
                            Team = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Assist = false,
                            MatchId = 2,
                            Note = "",
                            Team = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Assist = false,
                            MatchId = 2,
                            Note = "",
                            Team = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            Assist = false,
                            MatchId = 2,
                            Note = "",
                            Team = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            Assist = false,
                            MatchId = 3,
                            Note = "",
                            Team = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            Assist = false,
                            MatchId = 4,
                            Note = "",
                            Team = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 10,
                            Assist = false,
                            MatchId = 4,
                            Note = "",
                            Team = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            Assist = false,
                            MatchId = 5,
                            Note = "",
                            Team = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 12,
                            Assist = false,
                            MatchId = 6,
                            Note = "",
                            Team = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 13,
                            Assist = false,
                            MatchId = 10,
                            Note = "",
                            Team = 1,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Team")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Scores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MatchId = 1,
                            Number = 1,
                            Team = 1,
                            Value = 6
                        },
                        new
                        {
                            Id = 2,
                            MatchId = 1,
                            Number = 1,
                            Team = 2,
                            Value = 2
                        },
                        new
                        {
                            Id = 3,
                            MatchId = 1,
                            Number = 2,
                            Team = 1,
                            Value = 3
                        },
                        new
                        {
                            Id = 4,
                            MatchId = 1,
                            Number = 2,
                            Team = 2,
                            Value = 6
                        },
                        new
                        {
                            Id = 5,
                            MatchId = 1,
                            Number = 3,
                            Team = 1,
                            Value = 6
                        },
                        new
                        {
                            Id = 6,
                            MatchId = 1,
                            Number = 3,
                            Team = 2,
                            Value = 0
                        },
                        new
                        {
                            Id = 7,
                            MatchId = 2,
                            Number = 1,
                            Team = 1,
                            Value = 6
                        },
                        new
                        {
                            Id = 8,
                            MatchId = 2,
                            Number = 1,
                            Team = 2,
                            Value = 2
                        },
                        new
                        {
                            Id = 9,
                            MatchId = 2,
                            Number = 2,
                            Team = 1,
                            Value = 6
                        },
                        new
                        {
                            Id = 10,
                            MatchId = 2,
                            Number = 2,
                            Team = 2,
                            Value = 3
                        });
                });

            modelBuilder.Entity("WhatSport.Domain.Models.ScoreConfirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ScoreId");

                    b.ToTable("ScoreConfirmations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Confirmed = true,
                            PlayerId = 1,
                            ScoreId = 1
                        },
                        new
                        {
                            Id = 2,
                            Confirmed = true,
                            PlayerId = 1,
                            ScoreId = 2
                        },
                        new
                        {
                            Id = 3,
                            Confirmed = true,
                            PlayerId = 1,
                            ScoreId = 3
                        },
                        new
                        {
                            Id = 4,
                            Confirmed = true,
                            PlayerId = 1,
                            ScoreId = 4
                        },
                        new
                        {
                            Id = 5,
                            Confirmed = true,
                            PlayerId = 1,
                            ScoreId = 5
                        },
                        new
                        {
                            Id = 6,
                            Confirmed = true,
                            PlayerId = 1,
                            ScoreId = 6
                        },
                        new
                        {
                            Id = 7,
                            Confirmed = true,
                            PlayerId = 3,
                            ScoreId = 1
                        },
                        new
                        {
                            Id = 8,
                            Confirmed = true,
                            PlayerId = 3,
                            ScoreId = 2
                        },
                        new
                        {
                            Id = 9,
                            Confirmed = true,
                            PlayerId = 3,
                            ScoreId = 3
                        },
                        new
                        {
                            Id = 10,
                            Confirmed = true,
                            PlayerId = 3,
                            ScoreId = 4
                        },
                        new
                        {
                            Id = 11,
                            Confirmed = true,
                            PlayerId = 3,
                            ScoreId = 5
                        },
                        new
                        {
                            Id = 12,
                            Confirmed = true,
                            PlayerId = 3,
                            ScoreId = 6
                        });
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberPlayers")
                        .HasColumnType("int");

                    b.Property<int>("NumberTimes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sports", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Padel",
                            NumberPlayers = 4,
                            NumberTimes = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "Voley-Playa",
                            NumberPlayers = 6,
                            NumberTimes = 2
                        });
                });

            modelBuilder.Entity("WhatSport.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastName = "Moreno",
                            Login = "admin",
                            Name = "Sergio",
                            Password = "098f6bcd4621d373cade4e832627b4f6",
                            Role = "Admin",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            LastName = "Lerepe",
                            Login = "user",
                            Name = "Pepe",
                            Password = "098f6bcd4621d373cade4e832627b4f6",
                            Role = "User",
                            Status = false
                        },
                        new
                        {
                            Id = 3,
                            LastName = "latrusca",
                            Login = "user1",
                            Name = "Amparo",
                            Password = "098f6bcd4621d373cade4e832627b4f6",
                            Role = "User",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            LastName = "Perez",
                            Login = "user4",
                            Name = "Florencio",
                            Password = "098f6bcd4621d373cade4e832627b4f6",
                            Role = "User",
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            LastName = "Pelaez",
                            Login = "user5",
                            Name = "Maria",
                            Password = "098f6bcd4621d373cade4e832627b4f6",
                            Role = "User",
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            LastName = "Gomez",
                            Login = "test",
                            Name = "Juan",
                            Password = "098f6bcd4621d373cade4e832627b4f6",
                            Role = "User",
                            Status = true
                        });
                });

            modelBuilder.Entity("WhatSport.Domain.Models.City", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Club", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.City", "City")
                        .WithMany("Clubs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.ClubSport", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.Club", "Club")
                        .WithMany("ClubSports")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhatSport.Domain.Models.Sport", "Sport")
                        .WithMany("ClubSports")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Equipment", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.Match", "Match")
                        .WithMany("Equipments")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhatSport.Domain.Models.Player", "Player")
                        .WithMany("Equipments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Friend", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.User", "FriendUser")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("FriendUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhatSport.Domain.Models.User", "User")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FriendUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Level", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.Sport", "Sport")
                        .WithMany("Levels")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhatSport.Domain.Models.User", "User")
                        .WithMany("Levels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Match", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("WhatSport.Domain.Models.Club", "Club")
                        .WithMany("Matches")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WhatSport.Domain.Models.Sport", "Sport")
                        .WithMany("Matches")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Club");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Player", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.Match", "Match")
                        .WithMany("Players")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhatSport.Domain.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Score", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.Match", "Match")
                        .WithMany("Scores")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.ScoreConfirmation", b =>
                {
                    b.HasOne("WhatSport.Domain.Models.Player", "Player")
                        .WithMany("ScoreConfirmations")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WhatSport.Domain.Models.Score", "Score")
                        .WithMany("ScoreConfirmations")
                        .HasForeignKey("ScoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.City", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Club", b =>
                {
                    b.Navigation("ClubSports");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Match", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("Players");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Player", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("ScoreConfirmations");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Score", b =>
                {
                    b.Navigation("ScoreConfirmations");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.Sport", b =>
                {
                    b.Navigation("ClubSports");

                    b.Navigation("Levels");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("WhatSport.Domain.Models.User", b =>
                {
                    b.Navigation("Levels");

                    b.Navigation("Players");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
